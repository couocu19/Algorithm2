package aboutbioindofile;

import java.util.Arrays;

//用来计算一些整体的占比等。。
public class CountRates1 {
    public static void main(String[] args) {
        CountRates1 c = new CountRates1();
        //计算拟南芥新区域的占比
        int[] chr_lens = {32540122,22217084,25743512,21578073,29480885,366924,154478};
        double[] rates = {0.0825759,0.1134716,0.0962176,0.1388579,0.0898717};

        //计算人类
        //chr1~chr23(x)
        int[] chr_lens1 = {248387328,242696752,201105948,193574945,182045439,172126628,160567428,146259331,150617247,134758134,135127769,
                           133324548,113566686,101161492,99753195,96330374,84276897,80542538,61707364,66210255,45090682,51324926,154259566,62460029};
        double[] rates1 = {0.0851515,0.0168015,0.0257506,0.0283295,0.0271323,0.0184817,0.0272821,0.0215810,0.2197691,0.0205801,0.0269796,
                           0.0144775,0.1446245,0.1070327,0.1615311,0.1551921,0.0606882,0.0483407,0.0877434,0.0628018,0.2091184,0.2663535,0.0272921,0.6069850};

        //计算猪
        int[] chr_lens2 = { 274330532,151935994,132848913,130910915,104526007,170843587,121844099,138966237,139512083,69359453,79169978,61602749
                ,208334590,141755446,140412725,79944280,63494081,55982971,125939595};
        double[] rates2 = {0.1102046,0.1388188,0.1324232,0.1004046,0.1730133,0.2401749,0.1218691,0.1299891,0.0974217,0.1149481,0.1364082,0.1772745,0.1404097,0.0870169,
                           0.1155097,0.1068427,0.1371576,0.1025027,0.0901322};
        //计算香蕉
        int[] chr_lens3 = {41765374,34826099,43931233,45086258,46513039,43117521,39373400,51314288,47719527,40511255,34663808,10397121};
        double[] rates3 = {0.3589992,0.2772931,0.2866036,0.2113049,0.2469303,0.2136319,0.2701348,0.2652357,0.2683407,0.2561010,0.2717547,0.2025053};

        //计算小鼠-新基因组
        int[] chr_lens4 = {195154279, 181755017, 159745316, 156860686, 151758149, 149588044, 144995196, 130127694, 124359700, 130530862, 121973369, 120092757, 120883175, 125139656, 104073951, 98008968,
                           95294699, 90720763, 61420004, 169476592, 91455967, 16299};
        //计算小鼠-老基因组
        int[] chr_lens4_old = {195471971, 182113224, 160039680, 156508116, 151834684, 149736546, 145441459, 129401213, 124595110, 130694993, 122082543, 120129022, 120421639, 124902244, 104043685, 98207768, 94987271, 90702639, 61431566, 171031299, 91744698, 16299};

        double[] rates4 = {0.0160604,0.0170944,0.0191803,0.0497096,0.0332227,0.0218627,0.0747231,0.0311808,0.0280023,0.0588483,0.0603074,0.0492242,
                           0.0372151,0.0267459,0.0267459,0.0307910,0.0332684,0.0500614,0.0571507,0.0546153,0.2137115};
        int[] chr_lens5 = {195471971, 182113224, 160039680, 156508116, 151834684, 149736546, 145441459, 129401213, 124595110, 130694993, 122082543, 120129022,
                           120421639, 124902244, 104043685, 98207768, 94987271, 90702639, 61431566, 171031299, 91744698, 16299
        };

        //森林草莓
        int[] chr_lens6 = {24346798, 29670488,38992715 ,34388015, 29536839, 39893988, 23954239};
        double[] rates6 = {0.0060019, 0.0165306, 0.0179781, 0.0328815, 0.0022343, 0.0057611, 0.0163997};
        //System.out.println(c.count(chr_lens6,rates6));

        long fvLen = 0;
        for(int i = 0;i<chr_lens1.length;i++){
            fvLen += chr_lens1[i];
        }
        System.out.println(fvLen);
        double fill_len = 0;
        for(int i = 0;i<chr_lens1.length;i++){
            fill_len += chr_lens1[i] * rates1[i];
        }
        System.out.println(fill_len/fvLen);


        long ttl_ms_old = 0;
//        for(int i = 0;i<chr_lens5.length;i++){
//            ttl_ms_old += chr_lens5[i];
//        }
//        System.out.println(ttl_ms_old);


        //计算人类的重复区域占比
        //每个重复类型在每条染色体上的数量
        long[] rpt_sine = {153458,122137,103249,82856,87103,83131,90891,75332,72317,78572,79400,83744,44590,54024,56712,70049,72057,35290,63991,43718,19046,36174,68036,17041};
        long[] rpt_line = {80360,78524,66800,60471,58560,55298,49594,48519,41141,42512,47065,44768,32537,30364,28928,26494,24841,24579,15818,22222,10867,12815,58615,6305};
        long[] rpt_ltr = {37293,42469,35251,38116,33053,29505,26691,27282,20854,21956,21624,23497,19499,17007,12898,14796,10889,13536,9143,12484,8908,6072,27779,5013};
        long[] rpt_dna = {33805,38109,33212,26124,27773,26197,23032,20869,18163,20461,18920,20976,13929,13640,13871,13556,12133,11217,6115,11986,5099,4964,21659,1821};
        long[] rpt_smrna = {1635,958,806,680,696,927,671,561,490,549,530,613,517,474,532,403,491,300,248,259,267,226,604,70};
        long[] rpt_sateli = {12810,677,536,439,354,263,489,394,492,316,293,336,613,1160,1111,2176,202,107,832,286,800,1385,287,12794};
        long[] rpt_simple = {68909,57294,45934,46195,41747,39611,37095,34380,28660,30947,30356,31517,30523,23257,22943,26353,19838,18411,15010,14535,13502,11113,33485,18805};
        long[] rpt_low = {8020,8446,6740,6845,6182,5892,5566,5103,4192,4698,4581,4606,3954,3265,3051,3005,3076,2661,2696,2147,1692,1482,4303,815};

        long[] l_sine = {35092866,28202021,23360368,18944139,19902175,19376173,21652560,17109208,16542442,18272292,17623912,19515787,10377344,12469278,13180299,16441260,17479261,8140661,15973084,9914931,4534940,8346277,15842621,4392507};
        long[] l_line = {47484226,51639700,44108561,43836636,40734665,37638557,32487778,31764652,25693620,26454291,29422487,27307925,21613153,20035089,17694858,12653550,11894100,15821212,7556692,11591254,7243449,6529846,50476302,6401308};
        long[] l_ltr = {19823370,21337497,18671567,20943232,17245906,15861485,13569114,14130918,10417180,10912589,11632313,12080065,10143227,8936631,6372309,6379404,5043494,6812849,4831211,5268399,4463650,2876203,16860215,4570334};
        long[] l_dna = {8260138,9383324,7984876,7045430,6906941,6618184,5668152,5331474,4344612,4344612,4890546,4603905,4967747,3648487,3398653,3184387,2831499,2650053,2838505,1244209,2640698,1281717,1113493,5150593,454013};
        long[] l_smrna = {168029,106000,85639,74854,76107,89896,68188,60165,52144,56373,53599,63104,564971,164745,401307,40135,53329,32871,34077,35802,402113,168829,61262,9316};
        long[] l_sateli = {18908814,3426362,5649507,5913621,4482899,3477663,5212149,3178692,8981852,3803292,4617824,3629299,9922986,5879910,8583473,15405194,4766808,5609367,6482931,4425442,3568217,8974915,3812564,13621942};
        long[] l_simple = {4044313,3277252,2340094,2506727,2522796,2021576,2437719,1816115,24059809,2065679,1615188,1684000,3016961,2631237,6078377,1630517,1490683,980004,993405,1667031,2314143,2773168,2050392,21888225};
        long[] l_low = {515508,516575,387415,401436,349899,344577,349530,310221,269827,296697,279734,292818,228877,204417,192319,243158,183179,153998,224176,158444,107610,105655,291645,110343};

        //计算人类所有unclassified类型的占比
        long[] rpt_unclfd = {915,903,736,591,629,591,567,478,453,512,516,465,371,368,317,330,357,283,262,252,109,193,448,98};
        long[] l_unclfd = {501949,450598,366921,278362,326058,282387,274801,203905,252801,255135,277232,234266,173285,187798,175617,159555,214090,127552,176688,144898,68895,108516,267484,25208};




        long[] counts_num = {0,0,0,0,0,0,0,0,0};
        long[] counts_len = {0,0,0,0,0,0,0,0,0};
        double total_len = 0;
        for(int i = 0;i<24;i++){
            counts_num[0] += rpt_sine[i];
            counts_num[1] += rpt_line[i];
            counts_num[2] += rpt_ltr[i];
            counts_num[3] += rpt_dna[i];
            counts_num[4] += rpt_smrna[i];
            counts_num[5] += rpt_sateli[i];
            counts_num[6] += rpt_simple[i];
            counts_num[7] += rpt_low[i];
              counts_num[8] += rpt_unclfd[i];

            counts_len[0] += l_sine[i];
            counts_len[1] += l_line[i];
            counts_len[2] += l_ltr[i];
            counts_len[3] += l_dna[i];
            counts_len[4] += l_smrna[i];
            counts_len[5] += l_sateli[i];
            counts_len[6] += l_simple[i];
            counts_len[7] += l_low[i];
              counts_len[8] += l_unclfd[i];

            total_len += chr_lens1[i];
        }
        //System.out.println(total_len);
        double[] rpt_rates = new double[9];
        for(int i = 0;i<9;i++){
            rpt_rates[i] = counts_len[i]/total_len;
        }

//        for(int i = 0;i<9;i++){
//            System.out.print(counts_num[i] +" ");
//        }
       // System.out.println();
//        for(int i = 0;i<9;i++){
//            System.out.print(counts_len[i] +" ");
//        }
      //  System.out.println();
//        for(int i = 0;i<9;i++){
//            System.out.print(rpt_rates[i] +" ");
//        }
      //  System.out.println();

        //double[] rpt_rates = {0.0851515,0.0168015,0.0257506,0.0283295,0.0271323,0.0184817,0.0272821,0.0215810,0.2197691,0.0205801,0.0269796,
              //  0.0144775,0.1446245,0.1070327,0.1615311,0.1551921,0.0606882,0.0483407,0.0877434,0.0628018,0.2091184,0.2663535,0.0272921};

      //  System.out.println(c.count(chr_lens4,rates4));

        int[] pg_rpt = {291591, 306065, 952880, 1768073, 755166, 3381, 1359036, 123556};
        long ttl_ph_rpt = 0;
        int len = pg_rpt.length;
        for(int i = 0;i<len;i++){
           ttl_ph_rpt += pg_rpt[i];
        }
       // System.out.println(ttl_ph_rpt);


    }




    public double count(int[] chr_len,double[] rates){
        double total = 0;
        //计算基因组总长
        for(int i = 0;i<chr_len.length;i++){
            total += chr_len[i];
        }
        //计算区域总长
        double regin_total = 0;
        for(int i = 0;i<rates.length;i++){
            regin_total += chr_len[i] * rates[i];
        }
        double res = regin_total/total;

        return res;

    }


}
